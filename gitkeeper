#!/usr/bin/env python3

import argparse
import configparser
from enum import Enum
import subprocess
from pathlib import Path
import os
import pwd
import signal
import sys
from typing import TYPE_CHECKING, Dict, List, Optional, Tuple
from concurrent.futures import ThreadPoolExecutor

# third-party deps
try:
    import tabulate
except ImportError:
    print("Missing deps 'tabulate': apt-get install python3-tabulate")
    sys.exit(1)

try:
    # Python 3.8+
    from typing import TypedDict
except ImportError:
    TypedDict = dict


# user email & name config
if TYPE_CHECKING:

    class InnerUserConfigType(TypedDict):
        path: Path
        user: Optional[str]

else:
    InnerUserConfigType = Dict[str, str]

UserConfigType = Dict[str, InnerUserConfigType]
if os.environ.get("SUDO_USER"):
    user_home = Path(pwd.getpwuid(int(os.environ["SUDO_UID"])).pw_dir)
else:
    user_home = Path.home()
USER_CONFIG_FILE = user_home / ".gitkeeper.conf"
USER_GITCONFIG_FILE = user_home / ".gitconfig"

current_username = os.environ.get("SUDO_USER") or pwd.getpwuid(os.getuid()).pw_name


class GitRuntimeError(RuntimeError):
    returncode: int
    message: str

    def __init__(self, message: str, returncode: int):
        self.message = message
        self.returncode = returncode

    def __str__(self) -> str:
        return f"{self.message} (exit code {self.returncode})"


def _run_git_command(
    repo: Path,
    command: List[str],
    sudo_user: Optional[str] = None,
    raw: bool = False,
    timeout: Optional[float] = None,
) -> Optional[str]:
    if sudo_user:
        command = ["sudo", "-u", sudo_user, "git"] + command
    else:
        command = ["git"] + command
    try:
        if not raw:
            p = subprocess.run(
                command, cwd=repo, stdout=subprocess.PIPE, timeout=timeout, check=False
            )
        else:
            p = subprocess.run(command, cwd=repo, timeout=timeout, check=False)
    except subprocess.TimeoutExpired as exc:
        raise GitRuntimeError(
            f"Timeout running {command} on {repo}", -signal.SIGKILL
        ) from exc
    if p.returncode != 0 and p.returncode != -signal.SIGPIPE:
        raise GitRuntimeError(f"Error running {command} on {repo}", p.returncode)
    if not raw:
        stdout = p.stdout.decode("utf-8")
    else:
        stdout = None
    return stdout


def run_git_command(
    repo: Path,
    command: List[str],
    sudo_user: Optional[str] = None,
    timeout: Optional[float] = None,
) -> str:
    return _run_git_command(repo, command, sudo_user, timeout=timeout)  # type: ignore


def run_git_command_raw(
    repo: Path,
    command: List[str],
    sudo_user: Optional[str] = None,
    timeout: Optional[float] = None,
) -> None:
    _run_git_command(repo, command, sudo_user, raw=True, timeout=timeout)


def get_sudo_user(repo: InnerUserConfigType, current_uid: int) -> Optional[str]:
    username = repo.get("user")
    if username:
        uid = pwd.getpwnam(username).pw_uid
        if uid != current_uid:
            return username
        return None
    uid = Path(repo["path"]).stat().st_uid
    if uid != current_uid:
        return pwd.getpwuid(uid).pw_name
    return None


def compare_hashes(repo: Path, sudo_user: Optional[str]) -> Tuple[str, str, str]:
    local_hash = run_git_command(repo, ["rev-parse", "HEAD"], sudo_user=sudo_user)
    remote_hash = run_git_command(repo, ["rev-parse", "@{u}"], sudo_user=sudo_user)
    base_hash = run_git_command(
        repo, ["merge-base", "HEAD", "@{u}"], sudo_user=sudo_user
    )
    return local_hash, remote_hash, base_hash


class LocalRemoteStatus(Enum):
    UP_TO_DATE = 1
    NEEDS_PULL = 2
    NEEDS_PUSH = 3
    DIVERGED = 4


class RemoteType(Enum):
    SSH = 1
    HTTP = 2
    NONE = 3
    UNKNOWN = 4


def fetch_and_compare(
    repo: Path, sudo_user: Optional[str], fetch: bool = True
) -> LocalRemoteStatus:
    if fetch:
        _ = run_git_command(repo, ["fetch"], sudo_user=sudo_user, timeout=30)
    local_hash, remote_hash, base_hash = compare_hashes(repo, sudo_user)
    if local_hash == remote_hash:
        return LocalRemoteStatus.UP_TO_DATE
    elif local_hash == base_hash:
        return LocalRemoteStatus.NEEDS_PULL
    elif remote_hash == base_hash:
        return LocalRemoteStatus.NEEDS_PUSH
    else:
        return LocalRemoteStatus.DIVERGED


def has_remote(repo: Path, sudo_user: Optional[str], push: bool = False) -> RemoteType:
    remote = run_git_command(repo, ["remote"], sudo_user=sudo_user)
    remote = remote.strip()
    if len(remote) == 0:
        return RemoteType.NONE
    if not push:
        url = run_git_command(repo, ["remote", "get-url", remote], sudo_user=sudo_user)
    else:
        url = run_git_command(
            repo, ["remote", "get-url", "--push", remote], sudo_user=sudo_user
        )
    # ignore http(s) remotes
    if url.startswith("http"):
        return RemoteType.HTTP
    if url.startswith("git@"):
        return RemoteType.SSH
    return RemoteType.UNKNOWN


def get_status(repo: Path, sudo_user: Optional[str]) -> Tuple[int, int]:
    status_str = run_git_command(
        repo, ["status", "--porcelain=v1"], sudo_user=sudo_user
    )
    untracked = 0
    staged = 0
    for line in status_str.split("\n"):
        if not line:
            continue
        status_str = line[:2]
        if status_str == "??":
            untracked += 1
        else:
            staged += 1
    return (untracked, staged)


def get_user_args(user_name: str, user_email: str) -> List[str]:
    return ["-c", f"user.name={user_name}", "-c", f"user.email={user_email}"]


def find_git_toplevel() -> Optional[Path]:
    try:
        p = Path.cwd()
        root_dev = p.stat().st_dev

        while p.stat().st_dev == root_dev:
            if (p / ".git").exists():
                return p
            if p == p.parent:
                break
            p = p.parent
    except Exception as e:
        # don't crash if we can't find git toplevel, just notice the user
        print("Error finding git toplevel:", e)

    return None


def repo_name_check(repo_name: str, config: UserConfigType) -> None:
    if not config.get(repo_name):
        print(f"Repo {repo_name} not found in config")
        sys.exit(1)


def repo_names_check(repo_names: List[str], config: UserConfigType) -> None:
    for repo_name in repo_names:
        repo_name_check(repo_name, config)


def status(
    config: UserConfigType,
    repo_names: List[str],
    current_uid: int,
    no_fetch: bool,
    threads: int,
) -> None:
    if not repo_names:
        repo_names = list(config.keys())

    def get_single_status(repo_name: str) -> Tuple[Path, str, str, str]:
        repo = config[repo_name]
        repo_path = Path(repo["path"])
        status_str = "?"
        remote_str = "?"

        try:
            sudo_user = get_sudo_user(repo, current_uid)
            untracked, staged = get_status(repo_path, sudo_user)
            if untracked or staged:
                status_str = f"❗ {staged} staged, {untracked} untracked"
            else:
                status_str = "✅ clean"

            # get remote info
            remote = has_remote(repo_path, sudo_user)
            if remote == RemoteType.NONE:
                remote_str = "N/A"
            elif remote == RemoteType.UNKNOWN:
                remote_str = "Unknown"
            else:
                lrstatus = fetch_and_compare(repo_path, sudo_user, not no_fetch)
                msg = ""
                if lrstatus == LocalRemoteStatus.UP_TO_DATE:
                    msg = "✅ up to date"
                elif lrstatus == LocalRemoteStatus.NEEDS_PULL:
                    msg = "⬇️ needs pull"
                elif lrstatus == LocalRemoteStatus.NEEDS_PUSH:
                    msg = "⬆️ needs push"
                else:
                    msg = "🔀 diverged"
                remote_str = msg
        except GitRuntimeError as e:
            print(e)

        return (repo_path, repo_name, status_str, remote_str)

    with ThreadPoolExecutor(max_workers=threads) as executor:
        table = list(executor.map(get_single_status, repo_names))

    print(tabulate.tabulate(table, headers=["Repo", "Name", "Status", "Remote"]))


def commit(
    repo: InnerUserConfigType,
    current_uid: int,
    user_name: str,
    user_email: str,
    args: List[str],
) -> None:
    try:
        sudo_user = get_sudo_user(repo, current_uid)
        repo_path = Path(repo["path"])
        # commit
        run_git_command(repo_path, ["add", "."], sudo_user=sudo_user)
        run_git_command_raw(
            repo_path,
            get_user_args(user_name, user_email) + ["commit"] + args,
            sudo_user=sudo_user,
        )
    except GitRuntimeError as e:
        print(e)
        sys.exit(1)


def update(config: UserConfigType, current_uid: int, threads: int) -> None:
    def update_single(repo_name: str) -> None:
        try:
            repo = config[repo_name]
            sudo_user = get_sudo_user(repo, current_uid)
            repo_path = Path(repo["path"])
            push_remote = has_remote(repo_path, sudo_user, push=True)
            lrstatus = fetch_and_compare(repo_path, sudo_user)
            if lrstatus == LocalRemoteStatus.UP_TO_DATE:
                return
            elif lrstatus == LocalRemoteStatus.NEEDS_PULL:
                run_git_command(repo_path, ["pull"], sudo_user=sudo_user)
                # update submodules, if any
                run_git_command(
                    repo_path,
                    ["submodule", "update", "--init", "--recursive"],
                    sudo_user=sudo_user,
                )
                print(f"Pulled {repo_path}")
            elif lrstatus == LocalRemoteStatus.NEEDS_PUSH:
                if push_remote == RemoteType.HTTP:
                    print(f"Repo {repo_path} has HTTP remote, skipping push")
                    return
                run_git_command(repo_path, ["push"], sudo_user=sudo_user)
                print(f"Pushed {repo_path}")
            elif lrstatus == LocalRemoteStatus.DIVERGED:
                print(f"Repo {repo_path} has diverged (requires manual intervention)")
        except GitRuntimeError as e:
            print(e)

    with ThreadPoolExecutor(max_workers=threads) as executor:
        executor.map(update_single, config.keys())


def vcs(
    repo: InnerUserConfigType,
    current_uid: int,
    user_name: str,
    user_email: str,
    args: List[str],
) -> None:
    try:
        sudo_user = get_sudo_user(repo, current_uid)
        repo_path = Path(repo["path"])
        run_git_command_raw(
            repo_path,
            get_user_args(user_name, user_email) + args,
            sudo_user=sudo_user,
        )
    except GitRuntimeError as e:
        print(e)
        sys.exit(1)


def diff(repo: InnerUserConfigType, current_uid: int) -> None:
    try:
        sudo_user = get_sudo_user(repo, current_uid)
        repo_path = Path(repo["path"])
        # 1. Show git status output
        run_git_command_raw(repo_path, ["status"], sudo_user=sudo_user)
        input("Press enter to show `git diff HEAD`")
        # 2. Show git diff HEAD output
        run_git_command_raw(repo_path, ["diff", "HEAD"], sudo_user=sudo_user)
    except GitRuntimeError as e:
        print(e)
        sys.exit(1)
    except KeyboardInterrupt:
        pass


def handle_user_config() -> Tuple[str, str]:
    def check_config(config_path: Path) -> Optional[configparser.ConfigParser]:
        parser = configparser.ConfigParser()
        if not parser.read(config_path):
            return None
        # The config should have ["user"]["email"] available
        if "user" in parser.sections() and parser["user"].get("email"):
            return parser
        return None

    # ~/.gitkeeper.conf first, and then ~/.gitconfig
    parser = check_config(USER_CONFIG_FILE)
    if not parser:
        parser = check_config(USER_GITCONFIG_FILE)
    if parser:
        user_email = parser["user"]["email"]
    else:
        # ask for user email, save it to USER_CONFIG_FILE
        user_email = input("Enter your email: ")
        parser = configparser.ConfigParser()
        parser["user"] = {"email": user_email}
        with open(USER_CONFIG_FILE, "w", encoding="utf-8") as f:
            parser.write(f)
        print(
            f"You can change your email (and name, if necessary) in {USER_CONFIG_FILE}"
        )
    user_name = parser["user"].get("name", current_username)
    return user_email, user_name


def main(args: argparse.Namespace) -> None:
    current_uid = os.getuid()
    user_email, user_name = handle_user_config()

    if not args.config.exists():
        print(f"Global config file {args.config} not found")
        sys.exit(1)

    parser = configparser.ConfigParser()
    parser.read(args.config)
    cwd_toplevel = find_git_toplevel()
    _config = {k: dict(parser.items(k)) for k in parser.sections()}
    # check if config is valid
    config: UserConfigType = {}
    for repo_name in _config:
        if repo_name == ".":
            print("A repo name of . is unsupported.")
            continue
        config[repo_name] = {}  # type: ignore
        config[repo_name]["path"] = Path(_config[repo_name]["path"])
        if _config[repo_name].get("user"):
            config[repo_name]["user"] = _config[repo_name]["user"]
        if config[repo_name]["path"] == cwd_toplevel:
            config["."] = {
                "path": cwd_toplevel,
                "user": config[repo_name].get("user"),
            }

    threads = args.parallel

    repo_names: List[str]
    if args.command == "status":
        repo_names = args.repos
        repo_names_check(repo_names, config)

        no_fetch = args.no_fetch
        status(config, repo_names, current_uid, no_fetch, threads)
    elif args.command == "commit":
        repo_name = args.repo
        repo_name_check(repo_name, config)

        repo = config[repo_name]
        commit(repo, current_uid, user_name, user_email, args.args)
    elif args.command == "update":
        repo_names = args.repos
        repo_names_check(repo_names, config)

        if repo_names:
            new_config: UserConfigType = {}
            for repo_name in repo_names:
                new_config[repo_name] = config[repo_name]
            config = new_config
        update(config, current_uid, threads)
    elif args.command == "vcs":
        repo_name = args.repo
        repo_name_check(repo_name, config)

        repo = config[repo_name]
        vcs(repo, current_uid, user_name, user_email, args.args)
    elif args.command == "ls":
        print("\n".join(config.keys()))
    elif args.command == "diff":
        repo_name = args.repo
        repo_name_check(repo_name, config)

        repo = config[repo_name]
        diff(repo, current_uid)


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Track git repos")
    parser.add_argument(
        "--config",
        "-c",
        help="Path to config file",
        default="/etc/gitkeeper.conf",
        type=Path,
    )
    parser.add_argument(
        "--parallel",
        "-p",
        help="Threads to use for status and update commands",
        default=8,
        type=int,
    )
    subparsers = parser.add_subparsers(dest="command")

    parser_status = subparsers.add_parser("status", help="Show status of repo(s)")
    parser_status.add_argument("repos", nargs="*", help="Repo(s) to show status of")
    parser_status.add_argument(
        "--no-fetch", action="store_true", help="Don't fetch remote"
    )

    parser_commit = subparsers.add_parser(
        "commit", help="Add all and commit changes in repo(s) on behalf of current user"
    )
    parser_commit.add_argument("repo", help="The repo to commit changes in")
    parser_commit.add_argument(
        "args", nargs=argparse.REMAINDER, help="Arguments appended to git commit"
    )

    parser_update = subparsers.add_parser(
        "update", help="Push/pull repo(s) with remote"
    )
    parser_update.add_argument("repos", nargs="*", help="Repo(s) to push/pull")

    parser_vcs = subparsers.add_parser("vcs", help="Run a git command on repo(s)")
    parser_vcs.add_argument("repo", help="The repo to run git command on")
    parser_vcs.add_argument("args", nargs=argparse.REMAINDER, help="Arguments to git")

    parser_ls = subparsers.add_parser("ls", help="Just list all repos")
    parser_diff = subparsers.add_parser("diff", help="Show changes in given repo")
    parser_diff.add_argument("repo", help="The repo to show diff of")

    parser_help = subparsers.add_parser("help", help="Show help")

    args = parser.parse_args()
    if args.command is None:
        args.command = "status"
        args.repos = []
    elif args.command == "help":
        parser.print_help()
        sys.exit(0)

    main(args)
